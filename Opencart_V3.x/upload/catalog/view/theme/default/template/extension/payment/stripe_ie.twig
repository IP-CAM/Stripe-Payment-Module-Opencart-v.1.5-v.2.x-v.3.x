<link rel="stylesheet" type="text/css" href="{{ store_url }}catalog/view/theme/default/stylesheet/stripe.css">
<div class="payment-form-wrapper">
{% if test_mode %}
<small class="text-info">{{ text_debug }}</small>
{% endif %}
<form id="payment-form">
	<div id="payment-request-button"></div>
	<fieldset>
		<legend class="card-only">{{ text_pay_with_card }}</legend>
		<legend class="payment-request-available">{{ text_or_pay_with_card }}</legend>
		<div class="container-stripe">
			<!-- placeholder for Elements -->
			<div id="card-element"></div>
			<button type="button" id="button-confirm" class="buttons">{{ button_submit_payment }}</button>
		</div>
	</fieldset>
	<div class="error-stripe" role="alert">
		<svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 17 17">
			<path class="base" fill="#000" d="M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z"></path>
			<path class="glyph" fill="#FFF" d="M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z"></path>
		</svg>
		<span id="card-errors" class="message"></span>
	</div>
</form>
<div class="success-stripe">
	<div class="icon">
		<svg width="84px" height="84px" viewBox="0 0 84 84" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
			<circle class="border" cx="42" cy="42" r="40" stroke-linecap="round" stroke-width="4" stroke="#000" fill="none"></circle>
		</svg>
	</div>
</div>
</div>
<script type="text/javascript" src="https://js.stripe.com/v3/"></script>
<script type="text/javascript">
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function initStripe() {
  if (window.Stripe) {
    var stripe = Stripe('{{ payment_stripe_public_key }}');
    var elements = stripe.elements({% if locale %}{"locale": "{{ locale }}"}{% endif %});
    var style = {
      base: {
        color: "#32325D",
        fontWeight: 500,
        fontFamily: "Inter UI, Open Sans, Segoe UI, sans-serif",
        fontSize: "15px",
        fontSmoothing: "antialiased",
        "::placeholder": {
          color: "#CFD7DF"
        }
      },
      invalid: {
        color: "#E25950"
      }
    };
    var cardElement = elements.create('card', {
      style: style,
      hidePostalCode: true
    });
    cardElement.mount('#card-element');
    var cardButton = document.getElementById('button-confirm');
    var billing_details = {{ billing_details|json_encode|raw }};
    cardButton.addEventListener('click', /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(ev) {
        var _awaitCreatePaymentMethod, paymentMethod, error, response, json;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                $('.payment-form-wrapper').addClass('submitting');
                _context.next = 3;
                return stripe.createPaymentMethod('card', cardElement, billing_details);

              case 3:
                _awaitCreatePaymentMethod = _context.sent;
                paymentMethod = _awaitCreatePaymentMethod.paymentMethod;
                error = _awaitCreatePaymentMethod.error;

                if (!error) {
                  _context.next = 10;
                  break;
                }

                // Show error in payment form
                showErrorMessage(error.message);
                _context.next = 17;
                break;

              case 10:
                _context.next = 12;
                return fetch('https://lula.lt/index.php?route=extension/payment/stripe/confirm&amp;format=json', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    payment_method_id: paymentMethod.id
                  })
                });

              case 12:
                response = _context.sent;
                _context.next = 15;
                return response.text();

              case 15:
                json = _context.sent;
                // Handle server response (see Step 3)
                handleServerResponse(json);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    var handleServerResponse = /*#__PURE__*/function () {
      var _handleServerResponse = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(response) {
        var _awaitHandleCardAction, errorAction, paymentIntent, serverResponse;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                response = JSON.parse(response);
                _context2.next = 11;
                break;

              case 4:
                _context2.prev = 4;
                _context2.t0 = _context2["catch"](0);
                console.warn("Stripe App have encountered with some error. This error might not be caused by Stripe App. Such errors come when Stripe App receive unexpected JSON response from your server.");
                console.warn("Please see below the response your server sent, whereas JSON was expected by Stripe App.");
                console.error(response);
                console.error(_context2.t0);
                return _context2.abrupt("return");

              case 11:
                if (!response.error) {
                  _context2.next = 15;
                  break;
                }

                // Show error from server on payment form
                showErrorMessage(response.error);
                _context2.next = 36;
                break;

              case 15:
                if (!response.requires_action) {
                  _context2.next = 35;
                  break;
                }

                _context2.next = 18;
                return stripe.handleCardAction(response.payment_intent_client_secret);

              case 18:
                _awaitHandleCardAction = _context2.sent;
                errorAction = _awaitHandleCardAction.error;
                paymentIntent = _awaitHandleCardAction.paymentIntent;

                if (!errorAction) {
                  _context2.next = 25;
                  break;
                }

                // Show error from Stripe.js in payment form
                showErrorMessage(errorAction.message);
                _context2.next = 33;
                break;

              case 25:
                _context2.next = 27;
                return fetch('https://lula.lt/index.php?route=extension/payment/stripe/confirm&amp;format=json', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    payment_intent_id: paymentIntent.id
                  })
                });

              case 27:
                serverResponse = _context2.sent;
                _context2.t1 = handleServerResponse;
                _context2.next = 31;
                return serverResponse.text();

              case 31:
                _context2.t2 = _context2.sent;
                (0, _context2.t1)(_context2.t2);

              case 33:
                _context2.next = 36;
                break;

              case 35:
                // Show success message
                window.location = response.success;

              case 36:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 4]]);
      }));

      function handleServerResponse(_x2) {
        return _handleServerResponse.apply(this, arguments);
      }

      return handleServerResponse;
    }();

    var showErrorMessage = function showErrorMessage(error) {
      $(".payment-form-wrapper #card-errors").text(error);
      $(".payment-form-wrapper .error-stripe").addClass("visible");
      $('.payment-form-wrapper').removeClass('submitting');
    };
  } else {
    setTimeout(function () {
      initStripe();
    }, 50);
  }
}

initStripe();
</script>